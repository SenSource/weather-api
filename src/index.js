/*
 * Weather API
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.    We provide following data through our API:     - Real-time weather - 14 day weather forecast - Astronomy - Time zone - Location data - Search or Autocomplete API - NEW: Historical weather - NEW: Future Weather (Upto 300 days ahead) - Weather Alerts - Air Quality Data  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!    We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=<YOUR API KEY>  
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Alerts', 'model/ArrayOfSearch', 'model/Astronomy', 'model/Current', 'model/Error400', 'model/Error401', 'model/Error403', 'model/Forecast', 'model/Ip', 'model/Location', 'model/Search', 'api/APIsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Alerts'), require('./model/ArrayOfSearch'), require('./model/Astronomy'), require('./model/Current'), require('./model/Error400'), require('./model/Error401'), require('./model/Error403'), require('./model/Forecast'), require('./model/Ip'), require('./model/Location'), require('./model/Search'), require('./api/APIsApi'));
  }
}(function(ApiClient, Alerts, ArrayOfSearch, Astronomy, Current, Error400, Error401, Error403, Forecast, Ip, Location, Search, APIsApi) {
  'use strict';

  /**
   * _IntroductionWeatherAPI_com_provides_access_to_weather_and_geo_data_via_a_JSONXML_restful_API__It_allows_developers_to_create_desktop_web_and_mobile_applications_using_this_data_very_easy___We_provide_following_data_through_our_API______Real_time_weather__14_day_weather_forecast__Astronomy__Time_zone__Location_data__Search_or_Autocomplete_API__NEW_Historical_weather__NEW_Future_Weather__Upto_300_days_ahead__Weather_Alerts__Air_Quality_Data_Getting_Started__You_need_to__signup_httpswww_weatherapi_comsignup_aspx_and_then_you_can_find_your_API_key_under__your_account_httpswww_weatherapi_comlogin_aspx_and_start_using_API_right_away__We_have__code_libraries_httpswww_weatherapi_comdocscode_libraries_aspx_for_different_programming_languages_like_PHP__net_JAVA_etc___If_you_find_any_features_missing_or_have_any_suggestions_please__contact_us_httpswww_weatherapi_comcontact_aspx____Authentication__API_access_to_the_data_is_protected_by_an_API_key__If_at_anytime_you_find_the_API_key_has_become_vulnerable_please_regenerate_the_key_using_Regenerate_button_next_to_the_API_key___Authentication_to_the_WeatherAPI_com_API_is_provided_by_passing_your_API_key_as_request_parameter_through_an_API________key_parameter_keyYOUR_API_KEY_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var WeatherApi = require('index'); // See note below*.
   * var xxxSvc = new WeatherApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new WeatherApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new WeatherApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new WeatherApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Alerts model constructor.
     * @property {module:model/Alerts}
     */
    Alerts: Alerts,
    /**
     * The ArrayOfSearch model constructor.
     * @property {module:model/ArrayOfSearch}
     */
    ArrayOfSearch: ArrayOfSearch,
    /**
     * The Astronomy model constructor.
     * @property {module:model/Astronomy}
     */
    Astronomy: Astronomy,
    /**
     * The Current model constructor.
     * @property {module:model/Current}
     */
    Current: Current,
    /**
     * The Error400 model constructor.
     * @property {module:model/Error400}
     */
    Error400: Error400,
    /**
     * The Error401 model constructor.
     * @property {module:model/Error401}
     */
    Error401: Error401,
    /**
     * The Error403 model constructor.
     * @property {module:model/Error403}
     */
    Error403: Error403,
    /**
     * The Forecast model constructor.
     * @property {module:model/Forecast}
     */
    Forecast: Forecast,
    /**
     * The Ip model constructor.
     * @property {module:model/Ip}
     */
    Ip: Ip,
    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location: Location,
    /**
     * The Search model constructor.
     * @property {module:model/Search}
     */
    Search: Search,
    /**
     * The APIsApi service constructor.
     * @property {module:api/APIsApi}
     */
    APIsApi: APIsApi
  };

  return exports;
}));
