/*
 * Weather API
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.    We provide following data through our API:     - Real-time weather - 14 day weather forecast - Astronomy - Time zone - Location data - Search or Autocomplete API - NEW: Historical weather - NEW: Future Weather (Upto 300 days ahead) - Weather Alerts - Air Quality Data  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!    We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=<YOUR API KEY>  
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ArrayOfSearch', 'model/Error400', 'model/Error401', 'model/Error403', 'model/Ip', 'model/Location'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ArrayOfSearch'), require('../model/Error400'), require('../model/Error401'), require('../model/Error403'), require('../model/Ip'), require('../model/Location'));
  } else {
    // Browser globals (root is window)
    if (!root.WeatherApi) {
      root.WeatherApi = {};
    }
    root.WeatherApi.APIsApi = factory(root.WeatherApi.ApiClient, root.WeatherApi.ArrayOfSearch, root.WeatherApi.Error400, root.WeatherApi.Error401, root.WeatherApi.Error403, root.WeatherApi.Ip, root.WeatherApi.Location);
  }
}(this, function(ApiClient, ArrayOfSearch, Error400, Error401, Error403, Ip, Location) {
  'use strict';

  /**
   * APIs service.
   * @module api/APIsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new APIsApi. 
   * @alias module:api/APIsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the astronomy operation.
     * @callback module:api/APIsApi~astronomyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Astronomy API
     * Return Location and Astronomy Object
     * @param {String} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {Date} dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format
     * @param {module:api/APIsApi~astronomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.astronomy = function(q, dt, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling astronomy");
      }

      // verify the required parameter 'dt' is set
      if (dt === undefined || dt === null) {
        throw new Error("Missing the required parameter 'dt' when calling astronomy");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'dt': dt,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/astronomy.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the forecastWeather operation.
     * @callback module:api/APIsApi~forecastWeatherCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Forecast API
     * Forecast weather API method returns upto next 10 day weather forecast and weather alert as json. The data is returned as a Forecast Object.<br /><br />Forecast object contains astronomy data, day weather forecast and hourly interval weather information for a given city.
     * @param {String} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {Number} days Number of days of weather forecast. Value ranges from 1 to 14
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dt Date should be between today and next 14 day in yyyy-MM-dd format. e.g. '2015-01-01'
     * @param {Number} opts.unixdt Please either pass 'dt' or 'unixdt' and not both in same request. unixdt should be between today and next 14 day in Unix format. e.g. 1490227200
     * @param {Number} opts.hour Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6
     * @param {String} opts.lang Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'.
     * @param {module:api/APIsApi~forecastWeatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.forecastWeather = function(q, days, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling forecastWeather");
      }

      // verify the required parameter 'days' is set
      if (days === undefined || days === null) {
        throw new Error("Missing the required parameter 'days' when calling forecastWeather");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'days': days,
        'dt': opts['dt'],
        'unixdt': opts['unixdt'],
        'hour': opts['hour'],
        'lang': opts['lang'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/forecast.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the futureWeather operation.
     * @callback module:api/APIsApi~futureWeatherCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Future API
     * Future weather API method returns weather in a 3 hourly interval in future for a date between 14 days and 300 days from today in the future.
     * @param {String} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {Object} opts Optional parameters
     * @param {Date} opts.dt Date should be between 14 days and 300 days from today in the future in yyyy-MM-dd format (i.e. dt=2023-01-01)
     * @param {String} opts.lang Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'.
     * @param {module:api/APIsApi~futureWeatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.futureWeather = function(q, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling futureWeather");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'dt': opts['dt'],
        'lang': opts['lang'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/future.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the historyWeather operation.
     * @callback module:api/APIsApi~historyWeatherCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * History API
     * History weather API method returns historical weather for a date on or after 1st Jan, 2010 as json. The data is returned as a Forecast Object.
     * @param {String} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {Date} dt Date on or after 1st Jan, 2015 in yyyy-MM-dd format
     * @param {Object} opts Optional parameters
     * @param {Number} opts.unixdt Please either pass 'dt' or 'unixdt' and not both in same request.<br />unixdt should be on or after 1st Jan, 2015 in Unix format
     * @param {Date} opts.endDt Date on or after 1st Jan, 2015 in yyyy-MM-dd format<br />'end_dt' should be greater than 'dt' parameter and difference should not be more than 30 days between the two dates.
     * @param {Number} opts.unixendDt Date on or after 1st Jan, 2015 in Unix Timestamp format<br />unixend_dt has same restriction as 'end_dt' parameter. Please either pass 'end_dt' or 'unixend_dt' and not both in same request. e.g. unixend_dt=1490227200
     * @param {Number} opts.hour Must be in 24 hour. For example 5 pm should be hour=17, 6 am as hour=6
     * @param {String} opts.lang Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'.
     * @param {module:api/APIsApi~historyWeatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.historyWeather = function(q, dt, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling historyWeather");
      }

      // verify the required parameter 'dt' is set
      if (dt === undefined || dt === null) {
        throw new Error("Missing the required parameter 'dt' when calling historyWeather");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'dt': dt,
        'unixdt': opts['unixdt'],
        'end_dt': opts['endDt'],
        'unixend_dt': opts['unixendDt'],
        'hour': opts['hour'],
        'lang': opts['lang'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/history.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ipLookup operation.
     * @callback module:api/APIsApi~ipLookupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ip} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * IP Lookup API
     * IP Lookup API method allows a user to get up to date information for an IP address.
     * @param {String} q Pass IP address.
     * @param {module:api/APIsApi~ipLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ip}
     */
    this.ipLookup = function(q, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling ipLookup");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Ip;

      return this.apiClient.callApi(
        '/ip.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimeWeather operation.
     * @callback module:api/APIsApi~realtimeWeatherCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Realtime API
     * Current weather or realtime weather API method allows a user to get up to date current weather information in json and xml. The data is returned as a Current Object.<br /><br />Current object contains current or realtime weather information for a given city.
     * @param {String} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {Object} opts Optional parameters
     * @param {String} opts.lang Returns 'condition:text' field in API in the desired language.<br /> Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to check 'lang-code'.
     * @param {module:api/APIsApi~realtimeWeatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.realtimeWeather = function(q, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling realtimeWeather");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'lang': opts['lang'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/current.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAutocompleteWeather operation.
     * @callback module:api/APIsApi~searchAutocompleteWeatherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArrayOfSearch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search/Autocomplete API
     * WeatherAPI.com Search or Autocomplete API returns matching cities and towns as an array of Location object.
     * @param {String} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {module:api/APIsApi~searchAutocompleteWeatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArrayOfSearch}
     */
    this.searchAutocompleteWeather = function(q, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling searchAutocompleteWeather");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = ArrayOfSearch;

      return this.apiClient.callApi(
        '/search.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeZone operation.
     * @callback module:api/APIsApi~timeZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Time Zone API
     * Return Location Object
     * @param {String} q Pass US Zipcode, UK Postcode, Canada Postalcode, IP address, Latitude/Longitude (decimal degree) or city name. Visit [request parameter section](https://www.weatherapi.com/docs/#intro-request) to learn more.
     * @param {module:api/APIsApi~timeZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    this.timeZone = function(q, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling timeZone");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'application/xml'];
      var returnType = Location;

      return this.apiClient.callApi(
        '/timezone.json', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
