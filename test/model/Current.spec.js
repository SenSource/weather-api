/*
 * Weather API
 *  # Introduction  WeatherAPI.com provides access to weather and geo data via a JSON/XML restful API. It allows developers to create desktop, web and mobile applications using this data very easy.    We provide following data through our API:     - Real-time weather - 14 day weather forecast - Astronomy - Time zone - Location data - Search or Autocomplete API - NEW: Historical weather - NEW: Future Weather (Upto 300 days ahead) - Weather Alerts - Air Quality Data  # Getting Started    You need to [signup](https://www.weatherapi.com/signup.aspx) and then you can find your API key under [your account](https://www.weatherapi.com/login.aspx), and start using API right away!    We have [code libraries](https://www.weatherapi.com/docs/code-libraries.aspx) for different programming languages like PHP, .net, JAVA, etc.  If you find any features missing or have any suggestions, please [contact us](https://www.weatherapi.com/contact.aspx).    # Authentication    API access to the data is protected by an API key. If at anytime, you find the API key has become vulnerable, please regenerate the key using Regenerate button next to the API key.  Authentication to the WeatherAPI.com API is provided by passing your API key as request parameter through an API .      ##  key parameter  key=<YOUR API KEY>  
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.27
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WeatherApi);
  }
}(this, function(expect, WeatherApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Current', function() {
      beforeEach(function() {
        instance = new WeatherApi.Current();
      });

      it('should create an instance of Current', function() {
        // TODO: update the code to test Current
        expect(instance).to.be.a(WeatherApi.Current);
      });

      it('should have the property lastUpdatedEpoch (base name: "last_updated_epoch")', function() {
        // TODO: update the code to test the property lastUpdatedEpoch
        expect(instance).to.have.property('lastUpdatedEpoch');
        // expect(instance.lastUpdatedEpoch).to.be(expectedValueLiteral);
      });

      it('should have the property lastUpdated (base name: "last_updated")', function() {
        // TODO: update the code to test the property lastUpdated
        expect(instance).to.have.property('lastUpdated');
        // expect(instance.lastUpdated).to.be(expectedValueLiteral);
      });

      it('should have the property tempC (base name: "temp_c")', function() {
        // TODO: update the code to test the property tempC
        expect(instance).to.have.property('tempC');
        // expect(instance.tempC).to.be(expectedValueLiteral);
      });

      it('should have the property tempF (base name: "temp_f")', function() {
        // TODO: update the code to test the property tempF
        expect(instance).to.have.property('tempF');
        // expect(instance.tempF).to.be(expectedValueLiteral);
      });

      it('should have the property isDay (base name: "is_day")', function() {
        // TODO: update the code to test the property isDay
        expect(instance).to.have.property('isDay');
        // expect(instance.isDay).to.be(expectedValueLiteral);
      });

      it('should have the property condition (base name: "condition")', function() {
        // TODO: update the code to test the property condition
        expect(instance).to.have.property('condition');
        // expect(instance.condition).to.be(expectedValueLiteral);
      });

      it('should have the property windMph (base name: "wind_mph")', function() {
        // TODO: update the code to test the property windMph
        expect(instance).to.have.property('windMph');
        // expect(instance.windMph).to.be(expectedValueLiteral);
      });

      it('should have the property windKph (base name: "wind_kph")', function() {
        // TODO: update the code to test the property windKph
        expect(instance).to.have.property('windKph');
        // expect(instance.windKph).to.be(expectedValueLiteral);
      });

      it('should have the property windDegree (base name: "wind_degree")', function() {
        // TODO: update the code to test the property windDegree
        expect(instance).to.have.property('windDegree');
        // expect(instance.windDegree).to.be(expectedValueLiteral);
      });

      it('should have the property windDir (base name: "wind_dir")', function() {
        // TODO: update the code to test the property windDir
        expect(instance).to.have.property('windDir');
        // expect(instance.windDir).to.be(expectedValueLiteral);
      });

      it('should have the property pressureMb (base name: "pressure_mb")', function() {
        // TODO: update the code to test the property pressureMb
        expect(instance).to.have.property('pressureMb');
        // expect(instance.pressureMb).to.be(expectedValueLiteral);
      });

      it('should have the property pressureIn (base name: "pressure_in")', function() {
        // TODO: update the code to test the property pressureIn
        expect(instance).to.have.property('pressureIn');
        // expect(instance.pressureIn).to.be(expectedValueLiteral);
      });

      it('should have the property precipMm (base name: "precip_mm")', function() {
        // TODO: update the code to test the property precipMm
        expect(instance).to.have.property('precipMm');
        // expect(instance.precipMm).to.be(expectedValueLiteral);
      });

      it('should have the property precipIn (base name: "precip_in")', function() {
        // TODO: update the code to test the property precipIn
        expect(instance).to.have.property('precipIn');
        // expect(instance.precipIn).to.be(expectedValueLiteral);
      });

      it('should have the property humidity (base name: "humidity")', function() {
        // TODO: update the code to test the property humidity
        expect(instance).to.have.property('humidity');
        // expect(instance.humidity).to.be(expectedValueLiteral);
      });

      it('should have the property cloud (base name: "cloud")', function() {
        // TODO: update the code to test the property cloud
        expect(instance).to.have.property('cloud');
        // expect(instance.cloud).to.be(expectedValueLiteral);
      });

      it('should have the property feelslikeC (base name: "feelslike_c")', function() {
        // TODO: update the code to test the property feelslikeC
        expect(instance).to.have.property('feelslikeC');
        // expect(instance.feelslikeC).to.be(expectedValueLiteral);
      });

      it('should have the property feelslikeF (base name: "feelslike_f")', function() {
        // TODO: update the code to test the property feelslikeF
        expect(instance).to.have.property('feelslikeF');
        // expect(instance.feelslikeF).to.be(expectedValueLiteral);
      });

      it('should have the property visKm (base name: "vis_km")', function() {
        // TODO: update the code to test the property visKm
        expect(instance).to.have.property('visKm');
        // expect(instance.visKm).to.be(expectedValueLiteral);
      });

      it('should have the property visMiles (base name: "vis_miles")', function() {
        // TODO: update the code to test the property visMiles
        expect(instance).to.have.property('visMiles');
        // expect(instance.visMiles).to.be(expectedValueLiteral);
      });

      it('should have the property uv (base name: "uv")', function() {
        // TODO: update the code to test the property uv
        expect(instance).to.have.property('uv');
        // expect(instance.uv).to.be(expectedValueLiteral);
      });

      it('should have the property gustMph (base name: "gust_mph")', function() {
        // TODO: update the code to test the property gustMph
        expect(instance).to.have.property('gustMph');
        // expect(instance.gustMph).to.be(expectedValueLiteral);
      });

      it('should have the property gustKph (base name: "gust_kph")', function() {
        // TODO: update the code to test the property gustKph
        expect(instance).to.have.property('gustKph');
        // expect(instance.gustKph).to.be(expectedValueLiteral);
      });

      it('should have the property airQuality (base name: "air_quality")', function() {
        // TODO: update the code to test the property airQuality
        expect(instance).to.have.property('airQuality');
        // expect(instance.airQuality).to.be(expectedValueLiteral);
      });

    });
  });

}));
